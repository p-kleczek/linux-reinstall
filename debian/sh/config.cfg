#!/bin/bash

# ============================================================================
#                           << SNIPPETS >>
# ============================================================================

USE_TEST=0

if [ $USE_TEST -eq 1 ]; then
	exit
# ----------------------------------------------------------------------------

# << SNIPPETS >>
#
# printf "str" >> $FILE
# echo "str" >> $FILE
#
# echo '  [DEBUG] Exited!'; exit 
#



#write out current crontab

DROPBOX_CRON_FILE='/etc/cron.d/dropbox_autostart'

if [ -e "$DROPBOX_CRON_FILE" ]; then
    rm "$DROPBOX_CRON_FILE"
fi

touch $DROPBOX_CRON_FILE

echo "@reboot /home/$USERNAME/.dropbox-dist/dropboxd" >> "$DROPBOX_CRON_FILE"
# Pusta linia na końcu jest obowiązkowa!
printf "\n" >> "$DROPBOX_CRON_FILE"

echoinf "Dropbox run at startup -- set."

# ----------------------------------------------------------------------------
fi

# ============================================================================
#                       << PARAMETRY KONFIGURACYJNE >>
# ============================================================================

USERNAME='pkleczek'

HOME="/home/$USERNAME"  # generowane automatycznie
DOCS="$HOME/Documents"


APPS_DIR="$HOME/Applications"

# ============================================================================
## Generowane automatycznie

REINSTALL_DIR="$HOME/debian_reinstall"

# Katalog z kopiami zapasowymi edytowanych plików.
REINSTALL_BAK_DIR="$REINSTALL_DIR/~bak"

# ============================================================================
#                       << FUNKCJE POMOCNICZE >>
# ============================================================================

DEBUG_FLAG=0

logdebug() {
	if [ $DEBUG_FLAG -ne 0 ]; then
		printf "[D] %s\n" "$*" >&2;
	fi
}

logmisc() { printf "  > %s\n" "$*" >&2; }
loginfo() { printf "\n\n  [INFO] %s$(tput sgr 0)\n\n" "$*" >&2; }
logwarn() { printf "\n\n  $(tput setaf 4)$(tput setab 3)[WARN] %s$(tput sgr 0)\n\n" "$*" >&2; }
logerror() { printf "\n\n  $(tput setaf 1)$(tput setab 7)[ERROR] %s$(tput sgr 0)\n\n" "$*" >&2; }


echoerr() { printf "\n\n  $(tput setaf 1)$(tput setab 7)[ERROR] %s$(tput sgr 0)\n\n" "$*" >&2; }
echowarn() { printf "\n\n  $(tput setaf 4)$(tput setab 3)[WARN] %s$(tput sgr 0)\n\n" "$*" >&2; }
echoinf() { printf "\n\n  [INFO] %s$(tput sgr 0)\n\n" "$*" >&2; }

create_dir() {
	local NEW_PATH="$1"
	mkdir -p "$NEW_PATH"
}

create_dir_as_user() {
	local NEW_PATH="$1"
	sudo -u "$USERNAME" -i mkdir -p "$NEW_PATH"
}

create_bak_dir() {
	create_dir_as_user "$REINSTALL_BAK_DIR"
	# sudo -u "$USERNAME" -i mkdir -p "$REINSTALL_BAK_DIR"
}

is_pkg_installed() {
	local pkg=$1
	dpkg-query -W -f'${Status}' $pkg 2>/dev/null | grep -q 'ok installed'
	return $?
}


verify_pkg_installation() {
	local pkg=$1
	local program_name=$2
    if apt -qq install $pkg; then
        echoinf "$program_name successfully installed."
    else
        echoerr "Installing \`$pkg\` failed"
        exit
    fi
}

simple_pkg_install() {
	local pkg=$1
	if ! is_pkg_installed $pkg ; then
	    sudo apt install -y $pkg
	fi
}

escape_regex_chars() {
	local STR="$1"
	local sub_str=$STR

	# Characters which need escaping.
	local special_chars=( '[' ']' ':' '+' '/' '.' )

	for c in "${special_chars[@]}"; do
		#echo c: "$c"
		#echo
		local sed_expr=$( printf 's/\\%s/\\\\\%s/g' $c $c)
		#echo sed_expr: $sed_expr
		#exit
		sub_str=$( echo "$sub_str" | sed -r "$sed_expr")
	done

	echo $sub_str
}

set_property() {
	local CONFIG_FILE="$1"
	local PROPS_GROUP_NAME="$2"
	local PROP_KEY="$3"
	local PROP_VALUE="$4"

	## DEBUG
	if [ $DEBUG_FLAG -ne 0 ]; then
		printf "\n f: ${CONFIG_FILE}\n g: ${PROPS_GROUP_NAME}\n k: ${PROP_KEY}\n v: ${PROP_VALUE}\n\n"
	fi

	# Utwórz plik, jeśli nie istnieje.
	if ! [ -e "$CONFIG_FILE" ]; then
	    touch "$CONFIG_FILE"
	fi

	# Usuń wielokrotne nawiasy kwadratowe.
	local PROPS_GROUP=$( echo "[$PROPS_GROUP_NAME]" | sed -r 's/\]+/\]/g' | sed -r 's/\[+/\[/g' )

	# (na potrzeby regex-ów)
	local PROPS_GROUP_ESCAPED=$( escape_regex_chars "$PROPS_GROUP" )
	local PROP_VALUE_ESCAPED=$( escape_regex_chars "$PROP_VALUE" )

	local EXPECTED_ENTRY="$PROP_KEY=$PROP_VALUE"
	local EXPECTED_ENTRY_ESCAPED="$PROP_KEY=$PROP_VALUE_ESCAPED"

	local key_line_no=0
	local current_line_no=0
	local current_group=''
	logdebug
	while read line; do
		let current_line_no=current_line_no+1
		## DEBUG
		logdebug Line:  $line
		#echo Group: $current_group
		if grep -q '^\[' <<< "$line"; then
			current_group="$line"
		else
			## DEBUG
			#echo $PROP_KEY
			logdebug Line2:  $line
			if [ "$current_group" = "$PROPS_GROUP" ] && grep -q "^$PROP_KEY" <<< "$line" ; then
				key_line_no=$current_line_no
				break
			fi
		fi
		## DEBUG
		#echo
	done < $CONFIG_FILE

	## DEBUG
	logdebug "Key line no: $key_line_no"
	#awk "NR==0" $CONFIG_FILE


	# FIXME: uwzględnij tylko wpisy z danej grupy

	#if ! grep -q "$EXPECTED_ENTRY_ESCAPED" "$CONFIG_FILE"; then

	local key_line="$( awk "NR==$key_line_no" $CONFIG_FILE )"
	## DEBUG
	#echo Key line: $key_line

	if [ $key_line_no -gt 0 ] && grep -q '^'"$EXPECTED_ENTRY_ESCAPED"'$' <<< "$key_line" ; then
		logmisc "$PROP_KEY=$PROP_VALUE already defined."
		return 0  # brak zmian
	else
		# Para Key=value niezdefiniowana.
        logmisc "$PROP_KEY=$PROP_VALUE in $PROPS_GROUP undefined..."

	    if grep -q '^'"$PROPS_GROUP_ESCAPED"'$' "$CONFIG_FILE"; then
	    	# Grupa została zdefiniowana.

	        if [ $key_line_no -eq 0 ]; then
	        	# Dodaj klucz.
	            sed -i "s/^$PROPS_GROUP_ESCAPED$/$PROPS_GROUP_ESCAPED\n$EXPECTED_ENTRY_ESCAPED/" "$CONFIG_FILE"
	        	logmisc 'Key added.'
	        else
	            # Zmień wartość opcji.
	            sed -i "${key_line_no}s/^$PROP_KEY=.*/$EXPECTED_ENTRY_ESCAPED/" "$CONFIG_FILE"
	        	logmisc 'Key modified.'
	        fi
	    else
	    	# Grupa nie została zdefiniowana.
	    	logmisc 'Group created.'
			printf "\n" >> "$CONFIG_FILE"
			echo "$PROPS_GROUP" >> "$CONFIG_FILE"
			echo "$EXPECTED_ENTRY" >> "$CONFIG_FILE"
			printf "\n" >> "$CONFIG_FILE"
	    fi
	    return 1  # zmiana
	fi
}


remove_property_group() {
	local CONFIG_FILE="$1"
	local PROPS_GROUP_NAME="$2"

	## DEBUG
	if [ $DEBUG_FLAG -ne 0 ]; then
		printf "\n f: ${CONFIG_FILE}\n g: ${PROPS_GROUP_NAME}\n\n"
	fi

	# Utwórz plik, jeśli nie istnieje.
	if ! [ -e "$CONFIG_FILE" ]; then
		logerror "File '$CONFIG_FILE' does not exist!"
		return -1
	fi

	# Usuń wielokrotne nawiasy kwadratowe.
	local PROPS_GROUP=$( echo "[$PROPS_GROUP_NAME]" | sed -r 's/\]+/\]/g' | sed -r 's/\[+/\[/g' )

	# (na potrzeby regex-ów)
	local PROPS_GROUP_ESCAPED=$( escape_regex_chars "$PROPS_GROUP" )

	local current_line_no=0
	local current_group=''
	local group_found=0
	logdebug
	while read line; do
		let current_line_no=current_line_no+1
		## DEBUG
		logdebug Line:  $line
		#echo Group: $current_group
		if grep -q '^\[' <<< "$line"; then
			current_group="$line"
		fi

		if [ "$current_group" = "$PROPS_GROUP" ]; then
			group_found=1
			logdebug Removed
            sed -i "${current_line_no}s/^.*$//" "$CONFIG_FILE"
		fi
	done < $CONFIG_FILE

	return $group_found
}

clone_git_repo() {
	local REPO_ID="$1"
	local GIT_HOST="$2"
	local GIT_USER="$3"
	local GIT_GROUP="$4"
	local REPO_DIR="$5"

	PWD_INIT="$PWD"

	local GIT_URL=''
	if [ "$GIT_HOST" =  'BitBucket' ]; then
		GIT_URL="https://${GIT_USER}@bitbucket.org/${GIT_GROUP}/${REPO_ID}.git"
	else
		echoerr "Undefined Git host: ${GIT_HOST}"
		return -1
	fi

	git clone "$GIT_URL" "${REPO_DIR}/${REPO_ID}"


	cd "${REPO_DIR}/${REPO_ID}"

	# Point git to the newly created file in your config.
	# DON'T use global settings! (--global)
	git config credential.helper "$CREDENTIAL_MANAGER_DIR/git-credential-libsecret"

	git config user.name "Pawel Kleczek"
	case "$GIT_USER" in
		'pkleczek_agh')
			git config user.email "pkleczek@agh.edu.pl"
			;;
		'plkleczek')
			git config user.email "p.l.kleczek@gmail.com"
			;;
	esac

	cd "$PWD_INIT"

	# https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks

	POSTCOMMIT_HOOK_FILE="${REPO_DIR}/${REPO_ID}/.git/hooks/post-commit"

    cat > "$POSTCOMMIT_HOOK_FILE" <<EOF
#!/bin/bash
git push
EOF

	# Make the script executable.
	chmod 755 "$POSTCOMMIT_HOOK_FILE"
}
